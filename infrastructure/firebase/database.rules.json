{
  "rules": {
    "rooms": {
      "$roomId": {
        ".read": "auth != null && root.child('rooms').child($roomId).child('peers').child(auth.uid).exists()",

        "createdAt": {
          ".write": "auth != null && !data.exists()",
          ".validate": "newData.isNumber()"
        },
        "hostId": {
          ".write": "auth != null",
          ".validate": "newData.isString() || newData.val() == null"
        },
        "state": {
          ".write": "auth != null && auth.uid === data.parent().child('hostId').val()"
        },

        "peers": {
          "$uid": {
            ".write": "auth != null && auth.uid === $uid",
            ".validate": "newData.val() === true || newData.val() == null"
          }
        },

        "cursors": {
          "$uid": {
            ".write": "auth != null && auth.uid === $uid"
          }
        },

        "signals": {
          "$from": {
            ".write": "auth != null && auth.uid === $from",
            "$to": {
              ".write": "auth != null && (auth.uid === $to || auth.uid === $from)",
              "$key": {
                ".read": "auth != null && (auth.uid === $to || auth.uid === $from)",
                ".write": "auth != null && (auth.uid === $from || auth.uid === root.child('rooms').child($roomId).child('hostId').val())",
                ".validate": "newData.val() == null || auth.uid === $from"
              }
            }
          }
        }
      }
    }
  }
}
